name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linter
      run: npm run lint
      
    - name: Build project
      run: npm run build
      
    - name: Run tests with coverage
      run: npm run test:coverage
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        
    - name: Generate coverage summary markdown
      run: |
        echo "## Coverage Report" > coverage-summary.md
        echo "Coverage data generated at $(date)" >> coverage-summary.md
        
    - name: Generate coverage summary markdown
      run: |
        echo "## Coverage Report" > coverage-summary.md
        echo "Coverage data generated at $(date)" >> coverage-summary.md
        
    - name: Archive coverage results
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: coverage/
        
    - name: Set up Docker
      uses: docker/setup-buildx-action@v2
      
    - name: Build Docker image
      run: docker build -t alchemy-wallet .
      
    - name: Run Docker tests
      run: docker run --rm alchemy-wallet npm test
      
    - name: Prepare deployment
      if: github.ref == 'refs/heads/main'
      run: |
        echo "Preparing for deployment"
        npm run build:prod
        
    - name: Deploy to staging
      if: github.ref == 'refs/heads/develop'
      run: |
        echo "Deploying to staging environment"
        
    - name: Comment PR with coverage
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'Coverage report generated'
          });
          
    - name: Comment PR with coverage
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'Coverage report generated'
          });
          
    - name: Comment PR with coverage
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'Coverage report generated'
          });
          
    - name: Generate coverage summary markdown
      run: |
        echo "## Coverage Report" > coverage-summary.md
        echo "Coverage data generated at $(date)" >> coverage-summary.md
        
    - name: Deploy to production
      if: github.ref == 'refs/heads/main'
      run: |
        echo "Deploying to production environment"
          
    # Generate coverage summary markdown - Second duplicate
    - name: Generate coverage summary markdown
      run: |
        echo "## Coverage Report" > coverage-summary.md
        echo "Coverage data generated at $(date)" >> coverage-summary.md
        
    - name: Post deployment verification
      if: github.ref == 'refs/heads/main'
      run: |
        echo "Running post-deployment verification"
        
    # Generate coverage summary markdown - Third duplicate
    - name: Generate coverage summary markdown
      run: |
        echo "## Coverage Report" > coverage-summary.md
        echo "Coverage data generated at $(date)" >> coverage-summary.md
        
    - name: Cleanup artifacts
      run: |
        echo "Cleaning up build artifacts"